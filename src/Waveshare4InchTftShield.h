//  Copyright 2019 M Hotchin.
//
//  New class for the Waveshare 4 inch TFT touchscreen with SD card support.
//  Waveshare SKU 13587.
//  https://www.waveshare.com/product/modules/oleds-lcds/arduino-lcd/4inch-tft-touch-shield.htm
//
//  Likely also works with 3.5" touchscreen, Waveshare SKU 13506
//  
//  Based off the demo code available at:
//  https://www.waveshare.com/wiki/4inch_TFT_Touch_Shield
//
//  Primary improvements:
//    -- full implementation of the GFX API, with new functionality:
//       -- text sizing
//       -- screen rotation
//       -- invert display 
//    -- Proper SPI support - now allows use of other SPI components, including SdFat
//    -- much faster pixel based drawing - circles, disks, rounded corners, diagonal
//       lines now up to 6x faster.
//
//    -- Touchscreen API.  Can easily detect and position touches on the screen.  Based 
//       off the adafruit 'Touchscreen' library:
//       https://github.com/adafruit/Adafruit_TouchScreen
//        -- Automatic ongoing screen calibration.
//        -- co-ordinate normalization - converts raw touchscreen values into co-ordinates 
//           matching the current screen rotation.
//

#ifndef _WAVESHARE_4_INCH_TFT_SHIELD_h
#define _WAVESHARE_4_INCH_TFT_SHIELD_h

//  Touchscreen code ported from Adafruit 'Touchscreen' library.
// https://github.com/adafruit/Adafruit_TouchScreen

// Touch screen library with X Y and Z (pressure) readings as well
// as oversampling to avoid 'bouncing'
// (c) ladyada / adafruit
class TSPoint
{
public:
	TSPoint(void);
	TSPoint(int16_t x, int16_t y, int16_t z);

	bool operator==(TSPoint);
	bool operator!=(TSPoint);

	int16_t x, y, z;
};


//  Code compatible with the Adafruit 'Touchscreen' class, but now it's an Interface.
class WaveshareTouchScreen
{
public:
	//  It's in the class declaration, but not defined anywhere?
	//virtual bool isTouching(void) = 0;

	//  Looks like these return raw values
	virtual uint16_t pressure(void) = 0;
	virtual int16_t readTouchY() = 0;
	virtual int16_t readTouchX() = 0;

	//  This returns averaged values.
	virtual TSPoint getPoint() = 0;

	//  Not currently used?
	int16_t pressureThreshhold;
};


//  Configuration data for the touch screen.  It's automatically generated by
//  'normalizePoint()'.
struct TSConfigData
{
	int16_t xMin, xMax;
	int16_t yMin, yMax;
};



class Waveshare4InchTftShield : public Adafruit_GFX, public WaveshareTouchScreen
{
public:
	Waveshare4InchTftShield();

	//  Defaults to full brightness
	bool begin();

	//  Set initial brightness
	bool begin(uint8_t brightness);

	//  Use this for SD card support.
	uint8_t GetSdCardCS();


	// Adafruit GFX interface
	virtual void drawPixel(int16_t x, int16_t y, uint16_t color);    ///< Virtual drawPixel() function to draw to the screen/framebuffer/etc, must be overridden in subclass. @param x X coordinate.  @param y Y coordinate. @param color 16-bit pixel color. 

	virtual void startWrite(void);
	virtual void writePixel(int16_t x, int16_t y, uint16_t color);
	virtual void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
	virtual void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
	virtual void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
	virtual void endWrite(void);

	virtual void setRotation(uint8_t r);
	virtual void invertDisplay(boolean i);

	virtual void
		drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
		drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
		fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color),
		fillScreen(uint16_t color);

	//  Non Adafruit GFX APIs
	void setScreenBrightness(uint8_t);
	//  'Idle mode' is 8 color display mode.
	void setIdleMode(bool i);

	//  Guess who doesn't provide read access to their LCD?
	//  uint16_t readPixel(int16_t x, int16_t y);

	//  Touchscreen interface, code compatible with Adafruit 'Touchscreen' class.
	//  Implements the 'WaveshareTouchScreen' interface defined above.
	
	//bool isTouching(void);   //  Not implemented in the original
	uint16_t pressure(void);
	int16_t readTouchY();
	int16_t readTouchX();
	TSPoint getPoint();

	//  Data used for normalization.  Process will refine this as it goes along, if you
	//  can save this across power down the screen will be more accurate.
	const TSConfigData &getTsConfigData();
	void setTsConfigData(const TSConfigData &);
	void resetTsConfigData();

	//  Convert the TsPoint to current screen co-ordinates.  This will also calibrate the
	//  screen as it goes.  To calibrate the screen, just run the stylus off each of the
	//  four edges, calling this on the points as you do so.
	void normalizeTsPoint(TSPoint &p);

private:

	//  Version with no bounds checking.
	void writeFillRect2(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);

	void initializeLcd();
};


#endif

